# Cloud Build configuration for PeoplePerson
# Handles production deployment from main branch

substitutions:
  _PROJECT_ID: peopleperson-app
  _REGION: us-central1
  _API_SERVICE_NAME: peopleperson-api-production
  _FRONTEND_SERVICE_NAME: peopleperson-frontend-production

options:
  logging: CLOUD_LOGGING_ONLY
  logStreamingOption: STREAM_ON
  machineType: 'E2_HIGHCPU_8'

steps:
  # Build Docker images

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-api'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/peopleperson-api:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/peopleperson-api:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/peopleperson-api:latest'
      - '-f'
      - 'api/Dockerfile.prod'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/peopleperson-frontend:${SHORT_SHA}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/peopleperson-frontend:${BRANCH_NAME}'
      - '-t'
      - 'gcr.io/${_PROJECT_ID}/peopleperson-frontend:latest'
      - '-f'
      - 'frontend/Dockerfile.prod'
      - '.'

  # Push all images

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-api'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/peopleperson-api']
    waitFor: ['build-api']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args: ['push', '--all-tags', 'gcr.io/${_PROJECT_ID}/peopleperson-frontend']
    waitFor: ['build-frontend']

  # Deploy to Cloud Run

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-api'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_API_SERVICE_NAME}'
      - '--image'
      - 'gcr.io/${_PROJECT_ID}/peopleperson-api:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8000'
      - '--set-env-vars'
      - 'ENVIRONMENT=production'
    waitFor: ['push-api']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-frontend'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - '${_FRONTEND_SERVICE_NAME}'
      - '--image'
      - 'gcr.io/${_PROJECT_ID}/peopleperson-frontend:${SHORT_SHA}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '80'
      - '--set-env-vars'
      - 'NODE_ENV=production'
    waitFor: ['push-frontend']

  # Run smoke tests

  - name: 'python:3.11-slim'
    id: 'smoke-tests'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "üå™Ô∏è  Running smoke tests against deployed services..."
        
        pip install requests
        
        # Wait for services to be ready
        echo "‚è∞ Waiting 30s for services to fully initialize..."
        sleep 30
        
        # Test API health
        echo "üîç Testing API health endpoint..."
        api_response=$(curl -s -o /dev/null -w "%{http_code}" "https://${_API_SERVICE_NAME}-${_PROJECT_ID}.run.app/health" --max-time 15 || echo "000")
        if [ "$api_response" = "200" ]; then
          echo "‚úÖ API health check - OK"  
        else
          echo "‚ö†Ô∏è  API health check - HTTP $api_response (continuing anyway)"
        fi
        
        # Test Frontend
        echo "üîç Testing frontend..."
        frontend_response=$(curl -s -o /dev/null -w "%{http_code}" "https://${_FRONTEND_SERVICE_NAME}-${_PROJECT_ID}.run.app" --max-time 15 || echo "000")
        if [ "$frontend_response" = "200" ]; then
          echo "‚úÖ Frontend - OK"
        else
          echo "‚ö†Ô∏è  Frontend - HTTP $frontend_response"  
        fi
        
        echo "‚úÖ Smoke tests completed!"
        echo ""
        echo "üìä Deployment Summary:"
        echo "Environment: production"
        echo "Image Tag: ${SHORT_SHA}"
        echo "API URL: https://${_API_SERVICE_NAME}-${_PROJECT_ID}.run.app"
        echo "Frontend URL: https://${_FRONTEND_SERVICE_NAME}-${_PROJECT_ID}.run.app"
    waitFor: ['deploy-api', 'deploy-frontend']

# Secrets configuration
availableSecrets:
  secretManager:
    - versionName: projects/${_PROJECT_ID}/secrets/database-url/versions/latest
      env: 'DATABASE_URL'
    - versionName: projects/${_PROJECT_ID}/secrets/anthropic-api-key/versions/latest
      env: 'ANTHROPIC_API_KEY'

images:
  - 'gcr.io/${_PROJECT_ID}/peopleperson-api:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/peopleperson-api:${BRANCH_NAME}'
  - 'gcr.io/${_PROJECT_ID}/peopleperson-frontend:${SHORT_SHA}'
  - 'gcr.io/${_PROJECT_ID}/peopleperson-frontend:${BRANCH_NAME}'

timeout: '1800s'